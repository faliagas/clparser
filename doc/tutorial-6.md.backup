## PART II: Argp-Style Argument Handling

**Argp** is a mature interface for parsing program arguments which has evolved over a long time. It is a fully-featured argument parser, its most prominent feature being **GNU compatibility**. Programs using **argp** automatically produce output in response to the `--help` and `--version` command-line options, as described in the **GNU coding standards**; no call to **CmdLineArgs::option_help()** is necessary.

There are serious downsides to this, however. The programmer is required to write an _argument handling routine_ containing a long switch statement, and communicate the _main()_ function variables, which will be exposed to command-line modification, through data structures, pointers of which are passed to the argument handling functions. This too much effort, no code reusability, programming style of the past. Let us see an example of standard argp programming (Example 3 of argp's documentation):

```c
#include <stdlib.h>
#include <argp.h>

const char *argp_program_version = "argp-ex3 1.0";
const char *argp_program_bug_address = "<bug-gnu-utils@gnu.org>";
/* Program documentation. */
static char doc[] =
  "Argp example #3 -- a program with options and arguments using argp";
/* A description of the arguments we accept. */
static char args_doc[] = "ARG1 ARG2";

/* The options we understand. */
static struct argp_option options[] = {
  {"verbose",  'v', 0,      0,  "Produce verbose output" },
  {"quiet",    'q', 0,      0,  "Don't produce any output" },
  {"silent",   's', 0,      OPTION_ALIAS },
  {"output",   'o', "FILE", 0, "Output to FILE instead of standard output" },
  { 0 }
};

/* Used by main to communicate with parse_opt. */
struct arguments
{
  char *args[2];                /* arg1 & arg2 */
  int silent, verbose;
  char *output_file;
};

/* Parse a single option. */
static error_t parse_opt (int key, char *arg, struct argp_state *state)
{
  /* Get the input argument from argp_parse, which we
     know is a pointer to our arguments structure. */
  struct arguments *arguments = state->input;

  switch (key)
  {
    case 'q': case 's':
      arguments->silent = 1;
      break;
    case 'v':
      arguments->verbose = 1;
      break;
    case 'o':
      arguments->output_file = arg;
      break;

    case ARGP_KEY_ARG:
      if (state->arg_num >= 2)
        /* Too many arguments. */
        argp_usage (state);
      arguments->args[state->arg_num] = arg;
      break;

    case ARGP_KEY_END:
      if (state->arg_num < 2)
        /* Not enough arguments. */
        argp_usage (state);
      break;

    default:
      return ARGP_ERR_UNKNOWN;
  }
  return 0;
}

/* Our argp parser. */
static struct argp argp = { options, parse_opt, args_doc, doc };

int main (int argc, char **argv)
{
  struct arguments arguments;
  /* Default values. */
  arguments.silent = 0;
  arguments.verbose = 0;
  arguments.output_file = "-";
  /* Parse our arguments; every option seen by parse_opt will
     be reflected in arguments. */
  argp_parse (&argp, argc, argv, 0, 0, &arguments);

  printf ("ARG1 = %s\nARG2 = %s\nOUTPUT_FILE = %s\n"
          "VERBOSE = %s\nSILENT = %s\n",
          arguments.args[0], arguments.args[1],
          arguments.output_file,
          arguments.verbose ? "yes" : "no",
          arguments.silent ? "yes" : "no");

  exit (0);
}
```

**Clparser** is here to relieve the programmer of this coding burden, making **argp** programming a pleasure. **Clparser** achieves this by providing a high level interface to **argp**, quite similar - if not identical - to the free-style argument handling that we got to know in Part I. Here is the **clparser**-version of the previous example:

```c++
#include <cstdlib>
#include <cstdio>
#include "clparser.hpp"

const char *argp_program_version = "argp-ex3 1.0";
const char *argp_program_bug_address = "<bug-gnu-utils@gnu.org>";

int main (int argc, char **argv)
{
  // These are the variables left to the user's control.
  // No need for struct arguments -- use variables directly with default values.
  char *args[2]; // arg1 & arg2
  int   silent = 0, verbose = 0;
  char *output_file = (char*)"-";

  CmdLineArgs cl(argc, argv);
  try
  {
    // Program documentation
    cl.set_doc("Argp example #3 "
    	"-- a program with options and arguments using argp");
    cl.set_args_doc("ARG1 ARG2");
    // The options we understand
    cl.option("verbose", "Produce verbose output",   &verbose, 'v');
    cl.option("quiet",   "Don't produce any output", &silent,  'q');
    cl.alias ("silent",  's');
    cl.option("output",  "Output to $FILE$ instead of standard output",
        &output_file, 'o');
    // Parse our arguments; every option seen by Parse
    // will be reflected in the associated variables.
    cl.parse();
    // The user must supply exactly two arguments
    if (cl.sources().size() != 2)
    {
      cl.display_usage();
      return 3;
    }
    args[0] = const_cast<char*>(cl.sources().at(0).c_str());
    args[1] = const_cast<char*>(cl.sources().at(1).c_str());
  }
  catch (std::string& msg)
  {
    printf("error: %s\n", msg.c_str());
    return 3;
  }

  printf ("ARG1 = %s\nARG2 = %s\nOUTPUT_FILE = %s\n"
          "VERBOSE = %s\nSILENT = %s\n",
          args[0], args[1],
          output_file,
          verbose ? "yes" : "no",
          silent ? "yes" : "no");

  return 0;
}
```

The code would be even shorter if we used `string`s instead of `char *`'s.

The following differences from the free-style interface (FSI) must be born in mind when programming argument parsing with the argp interface:

- Option names in **argp** are _plain names_, i.e. without preceding `-` marks or trailing assignment characters (`=`). Option names in **argp** can be `null`; this is not allowed in FSI.
- Option identifiers, although optional, are important in **argp**; when they are printable characters, they form the _short version_ of the option. In FSI there are no such short versions available. If a short version of an option is desirable, it must be manually included as an **alias** of the main option. Option identifiers are usually determined internally by FSI.
- The user may specify _abbreviated versions of options_ in the command line; for example, instead of `--version`, abbreviations like `--vers` or `--ver` can be specified. This feature is not available in FSI.
- FSI <u>never</u> accesses the screen to print errors or messages. Everything that needs to be printed is collected as a message or thrown as a string error, when it is fatal. **Argp** doesn't; instead, it tries to take care of all possible printing needs of the program during argument parsing. Thus, there is no need to **display_messages()** in **argp**. You can even leave out the `try-catch` block, if you are 100% sure your option declarations are correct (<u>**not recommended!**</u>).
- Arguments not preceded by `-` are not available in **argp**. You have to collect them as sources, manually recognize them, and, of course, parse and handle them.
- Groups have an entirely different meaning in **argp**: they are for documentation purposes only. Mutually exclusive groups of options must be manually implemented using lambdas or option handlers.

The following lessons are similar to the preceding five lessons, up to a few differences originating in the different nature of the two interfaces. The reader that has followed the details of the previous lessons may pass them faster taking care to notice the differences from the FSI.

### Lesson 6: Command line specification of basic types

In this lesson you will learn how to program command line argument specifications for

- integers
- floating point numbers
- booleans, and
- strings

#### 1.1 The first steps

Assume we have the following program

```c++
#include <iostream>
using namespace std;
int main(int argc, char *argv[])
{
  int num = 1;
  cout << "num = " << num << endl;
  return 0;
}
```

and we would like to make the variable `n` accessible to the program's user, so that its default value 1 can be changed during run-time.

To do this we create an instance of **CmdLineArgs**, and tell it our intension to handle a command-line argument `-num` as follows (we are displaying the main function's body only without the `return` statement):

```c++
int num = 1;
CmdLineArgs cl(argc, argv);
cl.option("-num=", "number of objects", &num);
cl.parse();
cout << "num = " << num << endl;
```

On line 2 we create an instance of **CmdLineArgs**, and in the next line we use the **CmdLineArgs::option** method to declare that our program (in its binary executable form) will be expecting an argument `-num=xxx`, where `xxx` is an integer, as in the following example:

```shell
$ prog -num=12
```

Of course, the user may run the program without the argument. The second argument of the **option** method is informative and is used in formatting error massages and specification reports. We'll get to talk about this later. The last argument is a pointer to the variable that will receive the value specified at the command line. The  **option** method has an additional optional argument, which is a suggested `id` for the argument. The returned value is the `id` that was actually assigned by the system. The recommended use of the **option** method is with the default `id` value.

In the following line we ask `cl` to _parse the command line_, and, if the user has specified an argument `-num=xxx`, change the value of `num` to the the supplied value `xxx`. Finally, we print the value of `num`.

The code of this example is found in the file `example-11.cpp`. To create the executable program you need to also compile `clparser.cpp` and link them together, or link to the `clparser` library. The header file `clparser.hpp` must be included in the main source file. For convenience, one may use the supplied `codeblocks` project file `example-11.cbp`. For direct compilation with debugging information use the following commands in the `examples` subdirectory:

```shell
$ g++ -Wall -fexceptions -g -I../include -c ../src/clparser.cpp -o clparser.o
$ g++ -Wall -fexceptions -g -I../include -c example-11.cpp -o example-11.o
$ g++ -o example-11 example-11.o clparser.o
```

The `-Wall`, `-fexceptions` and `-g` switches are of course optional. Alternatively, the convenience script `compile-examples` can be used from the _clparser root directory_, i.e. the directory where the clparser sources were unpacked (e.g. `/home/myself/clparser`) to compile and link with the `clparser` library:
```shell
$ ./compile-examples example-11
```
To use the program, issue at the command prompt, for example,

```shell
$ ./example-11 -num=12
```

The output is

```shell
$ num = 12
```

#### 1.2 Adding exception handling
Let us experiment a little with our program and use it with an incorrect argument, say `-num=12y`. We obtain a message like this:

```sh
$ terminate called after throwing an instance of 'std::string'
```

As it is usually the case with C++ programming, we have to `catch` the unexpected condition and handle it. Look at the following modification of our code (see `example-12.cpp`):

```c++
int num = 1;
try {
  CmdLineArgs cl(argc, argv);
  cl.option("-num=", "number of objects", &num);
  cl.parse();
} catch (string& error_msg) {
  cout << "error: " << error_msg << endl;
  return 1;
}
cout << "num = " << num << endl;
```

All errors in **CmdLineArgs** are thrown as `std::string`s, so that their handling is quite simple (see code in the `catch` block). Compile as previously and run with the argument `-num=12y`. The result is now:

```sh
$ error: Incorrect integer specification '-num=12y'
```

#### 1.3 Handling unexpected arguments
Setting forth our experimentations, let us use it with an additional (unexpected) argument besides `-num=12`, say `-a=3`. We see that nothing particular happens; we get the same output as previously:

```sh
$ num = 12
```

and no error message is printed. The same no-error response we obtain if we specify the argument `num=12` (without `-`), this time with the default value of `num`:

```sh
$ num = 1
```

The reason is that the free-style (non-argp) version of **CmdLineArgs**, by default tolerates extra (unexpected) arguments, issuing only a warning message. The program must handle this message (we will see later how to do this), otherwise its behavior will be unusual and unexpected to the user, as we have seen.

We can make **CmdLineArgs** less tolerant of extra arguments by adding the statement `cl.set_extra_fatal();` below `cl`'s declaration, so that now our code looks like this (see `example-13.cpp`):

```c++
int num = 1;
try
{
  CmdLineArgs cl(argc, argv);
  cl.set_extra_fatal();
  cl.option("-num=", "number of objects", &num);
  cl.parse();
}
catch(std::string& error_msg)
{
  cout << "error: " << error_msg << endl;
  return 1;
}
cout << "num = " << num << endl;
```

Now, if we compile and run with the arguments `-num=12 -a=5` or `num=3` we get an error message:

```sh
$ error: Unknown option: '-a=6'
$ error: Unknown option: 'num=6'
```

#### 1.4 Displaying warning messages
Assume that we would like to have our program tolerate extra arguments. This means that the program does not interrupt its execution but issues a message informing the user of what is going on. Here is how simple it is to do this with **CmdLineArgs**: remove the statement `cl.set_extra_fatal()` below the `cl` declaration, and insert at the end of the `try` block the statement:

```c++
cl.display_messages();
```

Compile and run with the arguments `-num=12 -a=5`. Here is the output:

```sh
$ Unknown option: '-a=6'
$ num = 12
```

Of course, nothing is printed if there are no messages. To check the presence of messages use the `messages` method. For example, you can make all warning messages fatal errors as follows:

```c++
if (cl.messages())
{
  cout << "The following errors were encountered:" << endl;
  cl.display_messages();
  return 1;
}
```

If we run the program with the argument `num=12` we obtain:

```sh
$ Unknown option: 'num=12'
$ num = 1
```

However, if we run the program with the argument `num` no error message is obtained:

```sh
$ num = 1
```

This happens because **CmdLineArgs** considers the argument `num` a **source** instead of a program option. We get to speak about sources later on.

The code of this section is `example-14.cpp`.

#### 1.5 Floating point and string (character) data
The specification of floating-point and string data on the command line is much the same as the specification of integers. Assume we would like to have the user specify employee data, as for example name, age and salary, on the command line:

```c++
struct Employee {
  string name;
  int    age;
  double salary;
};

Employee employee = {"noname", 0, 0.};

try {
  CmdLineArgs cl(argc, argv);
  cl.option("-name=", "employee name", &employee.name);
  cl.option("-age=", "employee age", &employee.age);
  cl.option("-salary=", "employee salary", &employee.salary);
  cl.parse();
  cl.display_messages();
} catch (string& error_msg) {
  cout << "error: " << error_msg << endl;
  return 1;
}

cout << "Employee data:" << endl
     << "  name:   " << employee.name   << endl
     << "  age:    " << employee.age    << endl
     << "  salary: " << employee.salary << endl;

```

The code of this example is in `example-15.cpp`.
>To specify a string containing _spaces_ in the command line, enclose it in quotation marks.

Let's see it in action:

```sh
$ ./example-15 -name="John Doe" -salary=32500.75 -age=32
```

The output is

```sh
$ Employee data:
$   name:   John Doe
$   age:    32
$   salary: 32500.8
```

>To specify a string containing _quotation marks_ in the command line, escape them by prepending `\`, as for example

```sh
$ ./example-15 -name="Johnny \"the fox\"" -salary=32500 -age=29
```

#### 1.6 Booleans
Note that in order to specify integer, floating-point or string data, an assignment argument is always necessary. If we leave the assignment empty, as for example `-salary= -age=32`, an error condition is thrown. Also, if we omit the assignment sign (`=` by default), we get again an error.

Command line arguments without assignment are used to specify booleans (between other interesting thinks). Let us see it with an example. In the code of the previous section add a member `bool married;` to the Employer structure and modify its instantiation

```c++
Employee employee = {"noname", 0, 0., false};
```

Below the line `cl.option("-salary=", ...` add

```c++
  cl.option("-married", "married", &employee.married);
```

and modify the employee data printing statement to display the employee's marital status. Compile and run

```sh
$ ./example-16 -name="John Doe" -salary=32500.75 -age=32 -married
```

> Note that the command line specification of a boolean switch _without assignment_ always turns the connected boolean variable **on**. Consequently, the variable's default value must be `false`.

If this is a limitation, there is a second way offered by **CmdLineArgs** to specify booleans, which is similar to string specification. Change the previous code line to

```c++
  cl.option("-married=", "married", &employee.married);
```

and recompile. The command line is now

```sh
$ ./example-15 -name="John Doe" -salary=32500.75 -age=32 -married=true
```

>Notice the difference: `-married=true` instead of `-married`.

Assigned booleans can alternatively be specified by the keywords `yes` and `on`. A false boolean value is specified by the keywords `false`, `no`, `off`.

> The command line specification of a boolean switch _with assignment_ can turn the connected boolean variable **on** or **off**. The variable's default value can be `true` or `false`.

The first method is more concise, the second is more flexible. Which one to use? This is up to the programmer and the specific program being developed.
